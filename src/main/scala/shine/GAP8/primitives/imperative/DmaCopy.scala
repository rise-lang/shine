// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
// This file is automatically generated and should not be changed manually //
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! //
package shine.GAP8.primitives.imperative
import arithexpr.arithmetic._
import shine.DPIA.Phrases._
import shine.DPIA.Types._
import rise.core.types.{ FunType => _, DepFunType => _, TypePlaceholder => _, TypeIdentifier => _, ExprType => _, _ }
import rise.core.types.DataType._
import rise.core.types.Kind.{ Identifier => _, _ }
import shine.DPIA._
final case class DmaCopy(tt: shine.GAP8.DMATransferType)(val dt: DataType, val src: Phrase[ExpType], val dst: Phrase[AccType]) extends CommandPrimitive {
  assert {
    src :: expT(dt, read)
    dst :: accT(dt)
    true
  }
  override val t: CommType = comm
  override def visitAndRebuild(v: VisitAndRebuild.Visitor): DmaCopy = new DmaCopy(tt)(v.data(dt), VisitAndRebuild(src, v), VisitAndRebuild(dst, v))
  def unwrap: (DataType, Phrase[ExpType], Phrase[AccType]) = (dt, src, dst)
}
