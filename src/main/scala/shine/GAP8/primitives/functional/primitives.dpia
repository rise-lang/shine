def kernelCall{name: String, cores: Int, n:Int}(inTs: n*data, outT: data, args: n*exp[*inTs, read]): exp[outT, write]

def run{cores: Nat}(dt: data, input: exp[dt, write]): exp[dt, write]

def funConv3x3(
    h: nat,
    w: nat,
    dt: data,
    bias: nat,
    in: exp[h.w.dt, read],
    filter: exp[3.3.dt, read]
): exp[(h-2).(w-2).dt, write]

def funConv5x5(
    h: nat,
    w: nat,
    dt: data,
    bias: nat,
    in: exp[h.w.dt, read],
    filter: exp[5.5.dt, read]
): exp[(h-4).(w-4).dt, write]

def funConv7x7(
    h: nat,
    w: nat,
    dt: data,
    bias: nat,
    in: exp[h.w.dt, read],
    filter: exp[7.7.dt, read]
): exp[(h-6).(w-6).dt, write]

def funConv7x4(
    h: nat,
    w: nat,
    dt: data,
    bias: nat,
    in: exp[h.w.dt, read],
    filter: exp[4.7.dt, read]
): exp[(h-3).(w-6).dt, write]

def copyToL1(dt: data, input: exp[dt, read]): exp[dt, write]
def copyToL2(dt: data, input: exp[dt, read]): exp[dt, write]

def copy2DOffsetToL1(dt: data, h: nat, w: nat,
    offsetH: nat, offsetW: nat,
    input: exp[h.w.dt, read]): exp[(h+2*offsetH).(w+2*offsetW).dt, write]

def allocL1(dt: data, input: exp[dt, write]): exp[dt, read]
def allocL2(dt: data, input: exp[dt, write]): exp[dt, read]

def cast(dt1: data, dt2: data, input: exp[dt1, read]): exp[dt2, read]